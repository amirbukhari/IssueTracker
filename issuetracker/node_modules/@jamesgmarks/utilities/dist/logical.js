"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const miscellaneous_1 = require("./miscellaneous");
/**
 * Logical NOT operation
 * @param {boolean} x
 */
exports.not = (x) => !x;
/**
 * Logical AND operation. Both values must be truthy
 * @param {boolean} a
 * @param {boolean} b
 */
exports.and = (a, b) => !!a && !!b;
/**
 * Logical NAND operation. At least one value is not truthy.
 * @param {boolean} a
 * @param {boolean} b
 */
exports.nand = (a, b) => exports.not(exports.and(!!a, !!b)); // at least one is not true
/**
 * Logical OR operation. At least one value is truthy.
 * @param {boolean} a
 * @param {boolean} b
 */
exports.or = (a, b) => !!a || !!b;
/**
 * Logical NOR operation. Neither value is truthy.
 * @param {boolean} a
 * @param {boolean} b
 */
exports.nor = (a, b) => exports.not(exports.or(a, b));
/**
 * Logical XOR operation. One and only one value is truthy.
 * @param {boolean} a
 * @param {boolean} b
 */
exports.xor = (a, b) => exports.or(a, b) && exports.or(exports.not(a), exports.not(b)); // Only one is true
/**
 * Utility function internal to module.
 * @param {any} x
 */
const boolOrThrow = (x) => {
    if (!miscellaneous_1.isBoolean(x))
        throw new Error('Invalid operand. Must be boolean.');
    return x;
};
/**
 * Strict logical NOT operation If all operands are not boolean type an error will be thrown.
 * @param {boolean} x
 */
exports.strictNot = (x) => !boolOrThrow(x); // logical NOT
/**
 * Strict logical AND operation. Both values must be truthy If all operands are not boolean type an error will be thrown.
 * @param {boolean} a
 * @param {boolean} b
 */
exports.strictAnd = (a, b) => boolOrThrow(a) && boolOrThrow(b); // both are true
/**
 * Strict logical NAND operation. At least one value is not truthy. If all operands are not boolean type an error will be thrown.
 * @param {boolean} a
 * @param {boolean} b
 */
exports.strictNand = (a, b) => exports.strictNot(exports.strictAnd(a, b)); // at least one is not true
/**
 * Strict logical OR operation. At least one value is truthy. If all operands are not boolean type an error will be thrown.
 * @param {boolean} a
 * @param {boolean} b
 */
exports.strictOr = (a, b) => boolOrThrow(a) || boolOrThrow(b); // at least one is true
/**
 * Strict logical NOR operation. Neither value is truthy. If all operands are not boolean type an error will be thrown.
 * @param {boolean} a
 * @param {boolean} b
 */
exports.strictNor = (a, b) => exports.strictNot(exports.strictOr(a, b)); // Neither is true
/**
 * Strict logical XOR operation. One and only one value is truthy. If all operands are not boolean type an error will be thrown.
 * @param {boolean} a
 * @param {boolean} b
 */
exports.strictXor = (a, b) => exports.strictOr(a, b) && exports.strictOr(exports.strictNot(a), exports.strictNot(b)); // Only one is true
//# sourceMappingURL=logical.js.map