/**
 * Memoize a function. Returns a function, which when called multiple times
 * with the same parameters, will return a cached response.
 * `cacheProxy` is recommended as default caching does not expire.
 *
 * @param fn - The function to memoize. Can be any function at all.
 * @param cacheProxy - A proxy object that provides a getter and setter which is expected to manage cached data.
 *                     Works great with in memory caches that expire such as `redis` and `node-cache`
 */
export declare const memoize: <T extends CallableFunction>(fn: T, cacheProxy?: {
    get: (name: string) => any;
    set: (name: string, value: any) => any;
} | undefined) => T;
//# sourceMappingURL=memoize.d.ts.map