"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const object_hash_1 = __importDefault(require("./object-hash"));
const object_1 = require("./object");
const _1 = require(".");
const memoizeWithProxy = (f, cacheProxy) => ((...args) => {
    const argStr = JSON.stringify(args);
    return cacheProxy.set(argStr, cacheProxy.get(argStr) || f(...args));
});
/**
 * Memoize a function. Returns a function, which when called multiple times
 * with the same parameters, will return a cached response.
 * `cacheProxy` is recommended as default caching does not expire.
 *
 * @param fn - The function to memoize. Can be any function at all.
 * @param cacheProxy - A proxy object that provides a getter and setter which is expected to manage cached data.
 *                     Works great with in memory caches that expire such as `redis` and `node-cache`
 */
exports.memoize = (fn, cacheProxy) => {
    if (_1.def(cacheProxy))
        return memoizeWithProxy(fn, cacheProxy);
    const cache = {};
    return ((...args) => {
        const argStr = JSON.stringify(_1.map(args, (item) => (object_1.isDefinedObject(item) ? object_hash_1.default(item) : item)));
        cache[argStr] = cache[argStr] || fn(...args);
        return cache[argStr];
    });
};
//# sourceMappingURL=memoize.js.map