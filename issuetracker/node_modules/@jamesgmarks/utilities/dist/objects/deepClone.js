"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const keys_1 = require("./keys");
const reduce_1 = require("../arrays/reduce");
const isPrimitive_1 = require("../misc/isPrimitive");
const isArray_1 = require("../arrays/isArray");
const deepCloneArray_1 = require("../arrays/deepCloneArray");
/**
 * Does a deep copy of an object ensuring that reference values are recursively clones such that the resulting
 * object value does not refer to the same memory location that the source object value does. This is usually
 * preferred over the `clone()` method.
 *
 * Note: this is NOT intended for instances of class objects (those created with the `new` keyword, etc.)
 *
 * @param obj Object to copy.
 */
exports.deepClone = (obj) => {
    const out = reduce_1.reduce(keys_1.keys(obj), (acc, key) => {
        const val = obj[key];
        const copiedValue = (isPrimitive_1.isPrimitive(val) // eslint-disable-line no-nested-ternary
            ? val
            : (isArray_1.isArray(val) ? deepCloneArray_1.deepCloneArray(val) : exports.deepClone(val)));
        return Object.assign(Object.assign({}, acc), { [key]: copiedValue });
    }, {});
    return out;
};
//# sourceMappingURL=deepClone.js.map