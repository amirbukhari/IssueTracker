"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const distinct_1 = require("../arrays/distinct");
const keys_1 = require("./keys");
const reduce_1 = require("../arrays/reduce");
const isArray_1 = require("../arrays/isArray");
const deepMergeArrays_1 = require("../arrays/deepMergeArrays");
const isPrimitive_1 = require("../misc/isPrimitive");
const clone_1 = require("./clone");
exports.deepMerge = (a, b, arrayMergeMethod = 'concatOnly') => {
    const allKeys = distinct_1.distinct([...keys_1.keys(a), ...keys_1.keys(b)]);
    const result = reduce_1.reduce(allKeys, (acc, key) => {
        const aValue = a[key];
        const bValue = b[key];
        const val = bValue || aValue;
        // let keyVal: any;
        // if (undef(bValue)) {
        //   keyVal = aValue;
        // }
        // if (isReference(aValue) && isReference(bValue)) {
        //   if (isArray(aValue) && isArray(bValue)) {
        //     keyVal = deepMergeArrays(aValue, bValue, arrayMergeMethod);
        //   } else if (isDefinedObject(aValue) && isDefinedObject(bValue)) {
        //     keyVal = deepMerge(aValue, bValue, arrayMergeMethod);
        //   }
        // }
        return Object.assign(Object.assign({}, acc), { [key]: isPrimitive_1.isPrimitive(val) // eslint-disable-line no-nested-ternary
                ? val : (isArray_1.isArray(aValue) && isArray_1.isArray(bValue) // eslint-disable-line no-nested-ternary
                ? deepMergeArrays_1.deepMergeArrays(aValue, bValue, arrayMergeMethod)
                : (bValue !== aValue
                    ? exports.deepMerge(aValue, bValue, arrayMergeMethod)
                    : clone_1.clone(bValue))) });
    }, {});
    return result;
};
//# sourceMappingURL=deepMerge.js.map