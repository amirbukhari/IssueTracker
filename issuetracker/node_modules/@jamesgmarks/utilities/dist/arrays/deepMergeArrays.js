"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const isNull_1 = require("../misc/isNull");
const undef_1 = require("../misc/undef");
const isPrimitive_1 = require("../misc/isPrimitive");
const reduce_1 = require("./reduce");
const replaceAt_1 = require("./replaceAt");
const isArray_1 = require("./isArray");
const arrayCopy_1 = require("./arrayCopy");
const concat_1 = require("./concat");
const distinct_1 = require("./distinct");
const deepMerge_1 = require("../objects/deepMerge");
const InvalidParameterError_1 = require("../misc/types/InvalidParameterError");
const sameType_1 = require("../misc/sameType");
/**
 *
 * @param a
 * @param b
 * @param arrayMergeMethod
 */
exports.deepMergeArrays = (a, b, arrayMergeMethod = 'concatOnly') => {
    switch (arrayMergeMethod) {
        case 'index':
            return reduce_1.reduce(b, (acc, curr, index) => {
                const aValue = a === null || a === void 0 ? void 0 : a[index];
                if (isPrimitive_1.isPrimitive(curr)
                    || curr === aValue
                    || !sameType_1.sameType(curr, aValue)
                    || undef_1.undef(aValue)
                    || isNull_1.isNull(aValue)
                    || isNull_1.isNull(curr)) {
                    return replaceAt_1.replaceAt(acc, index, curr);
                }
                if (isArray_1.isArray(curr) && isArray_1.isArray(aValue)) {
                    return replaceAt_1.replaceAt(acc, index, exports.deepMergeArrays(aValue, curr, arrayMergeMethod));
                }
                return replaceAt_1.replaceAt(acc, index, deepMerge_1.deepMerge(aValue, curr, arrayMergeMethod));
            }, arrayCopy_1.arrayCopy(a) || []);
        case 'value':
            return distinct_1.distinct(concat_1.concat(a, b));
        case 'concatOnly':
            return concat_1.concat(a, b);
        default:
            throw new InvalidParameterError_1.InvalidParameterError('Must provide a valid arrayCopyMethod');
    }
};
//# sourceMappingURL=deepMergeArrays.js.map